#!/usr/bin/env/nextflow

// Define input parameters
params.samplesheet = ""
params.outdir = "s3://gtex-primary/reference-files/"    // Contains reference index files for STAR and RSEM
date = new java.util.Date()

// Process 1: Align RNA-Seq reads using STAR
process STAR {
    tag "${sample_id}_${date}"    // Tag for identifying the process
    memory 64.GB    // Memory allocation for the process
   
    input:
    tuple val(sample_id), path(fastq1), path(fastq2)
    path star_index
    path star_run
    
    publishDir "s3://gtex-primary/${sample_id}/${date}/"    //publish the process outputs to s3 bucket 

    // define all output files generated by the process
    output:    
    file "star_out/${sample_id}.Aligned.out.bam"
    file "star_out/${sample_id}.Aligned.sortedByCoord.out.bam"
    file "star_out/${sample_id}.Aligned.sortedByCoord.out.bam.bai"
    file "star_out/${sample_id}.Aligned.toTranscriptome.out.bam"
    file "star_out/${sample_id}.Chimeric.out.junction.gz"
    file "star_out/${sample_id}.Log.final.out"
    file "star_out/${sample_id}.Log.out"
    file "star_out/${sample_id}.Log.progress.out"
    file "star_out/${sample_id}.ReadsPerGene.out.tab.gz"
    file "star_out/${sample_id}.SJ.out.tab.gz"
    file "star_out/${sample_id}._STARpass1"
    val "${sample_id}"

   
   script:
   //Script to be executed by the process
    """
    python3 ${star_run} \
    ${star_index} ${fastq1} ${fastq2} ${sample_id} \
    --output_dir star_out \
    --outFilterMultimapNmax 20 \
    --alignSJoverhangMin 8 \
    --alignSJDBoverhangMin 1 \
    --outFilterMismatchNmax 999 \
    --outFilterMismatchNoverLmax 0.1 \
    --alignIntronMin 20 \
    --alignIntronMax 1000000 \
    --alignMatesGapMax 1000000 \
    --outFilterType BySJout \
    --outFilterScoreMinOverLread 0.33 \
    --outFilterMatchNminOverLread 0.33 \
    --limitSjdbInsertNsj 1200000 \
    --outSAMstrandField intronMotif \
    --outFilterIntronMotifs None \
    --alignSoftClipAtReferenceEnds Yes \
    --quantMode TranscriptomeSAM GeneCounts \
    --outSAMattrRGline ID:rg1 SM:sm1 \
    --outSAMattributes NH HI AS nM NM ch \
    --chimSegmentMin 15 \
    --chimJunctionOverhangMin 15 \
    --chimOutType Junctions WithinBAM SoftClip \
    --chimMainSegmentMultNmax 1 \
    --threads 64
    """

}

// Process 2: Mark duplicate reads in the BAM file
process MarkDuplicates {
   tag "${sample_id}_${date}"
   memory 32.GB
  
   input:
   path sortedByCoord_bam
   path MarkDuplicates_run
   val sample_id
   
   publishDir "s3://gtex-primary/${sample_id}/${date}/"

   output:
   file "${sample_id}.Aligned.sortedByCoord.out.md.bam"
   file "${sample_id}.marked_dup_metrics.txt"
   val "${sample_id}"

 
   """
   python3 -u ${MarkDuplicates_run} ${sample_id}.Aligned.sortedByCoord.out.bam ${sample_id}
   """

}

// Process 3: Quantify gene expression using RSEM
process RSEM {
   tag "${sample_id}_${date}"
   memory 32.GB
  
   input:
   path rsem_reference
   path rsem_run
   tuple path(STAR_bam), val(sample_id)
  
   publishDir "s3://gtex-primary/${sample_id}/${date}/"

   output:
   file "${sample_id}.rsem.genes.results"
   file "${sample_id}.rsem.isoforms.results"
   file "${sample_id}.rsem.stat/${sample_id}.rsem.cnt"
   file "${sample_id}.rsem.stat/${sample_id}.rsem.model"
   file "${sample_id}.rsem.stat/${sample_id}.rsem.theta"  
   val "${sample_id}"

   """
   python3 ${rsem_run} --max_frag_len 1000 --estimate_rspd true --is_stranded true --threads 64 ${rsem_reference} ${sample_id}.Aligned.toTranscriptome.out.bam ${sample_id}
   """
}

// Process 4: Perform quality control using RNA-SeQC
process RNASEQC {
   tag "${sample_id}_${date}"

   input:
   path genes_gtf 
   path rnaseqc_run
   tuple path(md_bam), val(sample_id)
  
   publishDir "s3://gtex-primary/${sample_id}/${date}/"

   output:
   file "${sample_id}.gene_reads.gct.gz"
   file "${sample_id}.gene_fragments.gct"
   file "${sample_id}.gene_tpm.gct.gz"
   file "${sample_id}.exon_reads.gct.gz"
   file "${sample_id}.metrics.tsv"
   val "${sample_id}"

  """
  python3 ${rnaseqc_run} ${genes_gtf} ${sample_id}.Aligned.sortedByCoord.out.md.bam ${sample_id} --stranded rf
  """
}


// Define the main workflow
workflow {
    // Read the sample sheet and create a channel of input data
fastq_files = channel.fromPath(params.metadata)       
	   .splitCsv()
      .map { line ->
         [
            line[0], // sample_name
            line[1], // fastq_path_1
            line[2] // fastq_path_2
         ]
     }

// Execute the processes in sequence, passing inputs and linking outputs
STAR(fastq_files, "${params.outdir}star_index/", "${params.outdir}run_STAR.py")
MarkDuplicates(STAR.out[1], "${params.outdir}run_MarkDuplicates.py", STAR.out[11])

STAR_ch = STAR.out[3]
   .merge(STAR.out[11])

RSEM("${params.outdir}rsem-index/", "${params.outdir}run_RSEM.py", STAR_ch)

MarkDuplicates_ch = MarkDuplicates.out[0]
   .merge(MarkDuplicates.out[2])

RNASEQC("${params.outdir}Homo_sapiens.GRCh38.83.chr.genes.gtf", "${params.outdir}run_rnaseqc.py", MarkDuplicates_ch)
}
